plugins {
    id 'com.android.application'
    id 'kotlin-android'
}
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    ndkVersion "21.1.6352462"

    defaultConfig {
        applicationId "uk.co.oliverdelange.instabugtest"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        setVersionCode(1)
        setVersionName("1")
        vectorDrawables.useSupportLibrary = true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jni']
            java.srcDirs += "gen/main/kotlin"
        }
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'com.google.android.material:material:1.3.0-alpha03'
    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation "androidx.core:core:1.6.0"
    implementation 'androidx.appcompat:appcompat:1.2.0'

    implementation 'com.instabug.library:instabug:10.10.1'
    implementation 'com.instabug.library:instabug-ndk-crash:10.10.1'
}


/** See https://github.com/mozilla/rust-android-gradle
 * Generates rust engine binaries
 * Run app:rust:cargoBuild to build all, or the CPU specific variants.
 * Outputs libandroid.so into carv-kotlin\app\build\rustJniLibs\android\{arch}* Osx/Linux uses your locally installed cargo
 * Windows, you need to run via WSL as the engine doesn't build on Windows.
 *  - Add `rust.cargoCommand=C\:\\Users\\you\\carv-kotlin\\cargo-wsl.bat` to projectRoot/local.properties
 *  - This will call cargo-wsl.bat which is a wrapper that calls cargo via WSL. Check it out.
 * */
cargo {
    module = "../engine-rust"
    libname = "android" // Load it like this `System.loadLibrary("android")`
    targets = ["arm", "arm64"]
    profile = "release"
    extraCargoBuildArguments = ["--manifest-path", "Cargo.toml", "--jobs", "3", "-p", "android"]
}

task rustEngineBindings(type: Exec) {
    group = "rust"
    description = "Generates the kotlin bindings for the rust engine"
    def outputDir = "$projectDir/gen/main/kotlin/com/motionmetrics/carv/rust/lib.kt"
    environment("ANDROID_KOTLIN_OUT_PATH", outputDir)
    environment("ANDROID_KOTLIN_PACKAGE", "com.motionmetrics.carv.rust")
    environment("ANDROID_KOTLIN_PROTO_PACKAGE", "com.motionmetrics.carv.proto")
    environment("ANDROID_KOTLIN_LIB", "android")
    environment("RUST_BACKTRACE", "1")

    workingDir "${rootDir}/engine-rust"
    executable "cargo"
    args = ["run", "--bin", "ffig", "--", "generate", "-c", "./android/source.toml"]
}